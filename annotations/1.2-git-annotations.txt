=== Como funciona novas Branchs e o HEAD ===
1 - Git cria Blobs que armazenam as modificações de cada commit, elas são apontadas para uma branch
2 - Primeiro os commits apontam para um objeto de árvore, e então para os blobs
3 - Commits apontam para uma Branch, a branch é como se fosse um 'apelido' para um commit
4 - Para o Git saber onde você está no meio de diversas branchs e commits, ele olha para um commit em especifico através de um ponteiro chamado HEAD
5 - O HEAD aponta para o Objeto da Branch, e o objeto da branch aponta para um commit o HASH dele #
 (Exemplo no arquivo .git/head -> refs/heads/sua-branch-atual)
 (Exemplo Hash .git/refs/heads/sua-branch-atual -> 5b224e32068083719930d16cda11be6ef37af3d9)
6 - Ao criar uma nova branch, ele apenas move o HEAD para o novo apelido (branch) do commit original
7 - Ao fazer um novo commit nessa nova branch, ele carrega o HEAD junto
8 - Se quiser mover o HEAD para checar qualquer commit do passado, de qualquer alteração é só fazer um Checkout usando o HASH daquele commit
9 - O HEAD é um ponteiro que dependendo de onde você colocar, ele mostra algo diferente.

=== Commandos do git ===

[FLUXO PADRÃO]
Verifica todos os arquivos com alterações e qual status da sua branch
> git status

Adiciona todos arquivos com alterações para staging
> git add -A

Faz commit dos arquivos em staging, adicionando uma mensagem
> git commit -m "Mensagem"

Faz upload das alterações para a sua branch
> git push

Faz download das alterações da sua branch
> git pull



[LOGS E ALTERAÇÕES]
Mostra o historico de alterações dessa branch
> git log

Log com Gráficos da linha do tempo a esquerda
> git log --graph

Mostra o historico de alterações e referencias no repositorio do git
> git reflog
(Util para obter o Hash de Branchs deletadas e perdidas para serem recuperadas)
> git reflog | grep 'mensagem do commit'
(grep é um comando que busca dentro de um texto, determinado padrão de string e retorna a linha em que ele aparece)

Tecla para sair do terminal do Git que utilize pagers (git log)
> q

Mostra quais foram as linhas modificadas entre arquivos alterados
> git diff


[BRANCHS]
Verifica qual sua Branch existem no sistema e em qual você está (*)
> git branch

Cria uma nova Branch
> git branch novaBranch

Troca de Branchs (Versão moderna)
> git switch nomeBranch

Troca de Branchs (Versão antiga)
> git checkout nomeBranch

Cria uma nova Branch, bifurcando da sua branch atual e levando seu código não commitado para ele
> git checkout -b nomeNovaBranch

Cria uma nova Branch, utilizando como base o hash de outro commit
> git checkout -b nomeNovaBranch 11c5d5s65

Sobe a nova branch no repositorio de origem
> git push  origin suabranch

Sobe a nova branch no repositorio de origem e mantém conectado a referencia dela
> git push --set-upstream origin suabranch (set-upstream é para ligar sua branch local com a nova criada)

Sobe a nova branch com referencia abreviado
> git push -U origin suabranch (set-upstream é para ligar sua branch local com a nova criada)

Deletar Branch que já fez merge
> git branch -d nomeBranch

Forçar deleção de Branch que não fez merge
> git branch -d nomeBranch

[MERGE E COMMIT]
Fast Fowards merge simples apartir do HEAD na Branch main/principal
> git merge nomeBranchAlvo

Comando do Git usado para modificar o commit mais recente
> git commit --amend

Comandos aninhados para modificar o commit mais recente
> git add -A && git commit --amend --no-edit && git push -f

Fazer alteração do commit sem ter modificação de arquivo
> git commit --amend --date=now